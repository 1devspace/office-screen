name: Auto Version Bump

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for commit analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Analyze commits and detect version bump
      id: version-bump
      run: |
        echo "Analyzing recent commits..."
        
        # Get recent commits (excluding merge commits)
        COMMITS=$(git log --oneline --no-merges -n 10)
        echo "Recent commits:"
        echo "$COMMITS"
        
        # Convert to list for Python processing
        COMMIT_LIST=$(echo "$COMMITS" | sed 's/^[^ ]* //' | tr '\n' '|')
        
        # Run version detection
        python -c "
        import sys
        sys.path.append('.')
        from version import detect_version_bump, get_recent_commits
        
        commits = get_recent_commits(10)
        bump_type = detect_version_bump(commits)
        print(f'Detected bump type: {bump_type}')
        print(f'::set-output name=bump_type::{bump_type}')
        "
        
        # Set output for next steps
        echo "bump_type=$(python -c "
        import sys
        sys.path.append('.')
        from version import detect_version_bump, get_recent_commits
        commits = get_recent_commits(10)
        bump_type = detect_version_bump(commits)
        print(bump_type)
        ")" >> $GITHUB_OUTPUT
    
    - name: Bump version
      id: bump
      run: |
        echo "Bumping version..."
        
        # Get current version
        CURRENT_VERSION=$(python -c "
        import sys
        sys.path.append('.')
        from version import VersionManager
        vm = VersionManager()
        print(vm.get_version_string())
        ")
        echo "Current version: $CURRENT_VERSION"
        
        # Bump version
        NEW_VERSION=$(python -c "
        import sys
        sys.path.append('.')
        from version import VersionManager
        vm = VersionManager()
        new_version = vm.bump_version('${{ steps.version-bump.outputs.bump_type }}')
        print(new_version)
        ")
        echo "New version: $NEW_VERSION"
        
        # Set outputs
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "bump_type=${{ steps.version-bump.outputs.bump_type }}" >> $GITHUB_OUTPUT
    
    - name: Update CHANGELOG
      run: |
        echo "Updating CHANGELOG..."
        # Generate changelog entry
        CHANGELOG_ENTRY=$(python -c "
        import sys
        sys.path.append('.')
        from version import VersionManager
        vm = VersionManager()
        print(vm.get_changelog_entry())
        ")
        # Add to CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          sed -i "3i\n$CHANGELOG_ENTRY" CHANGELOG.md
        else
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG_ENTRY" >> CHANGELOG.md
        fi
    
    - name: Commit version changes
      run: |
        git add version.json CHANGELOG.md
        git commit -m "Bump version to ${{ steps.bump.outputs.new_version }} (${{ steps.bump.outputs.bump_type }} bump)"
        git push origin main
    
    - name: Create Git tag
      run: |
        git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release version ${{ steps.bump.outputs.new_version }}"
        git push origin "v${{ steps.bump.outputs.new_version }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.bump.outputs.new_version }}"
        release_name: "Release ${{ steps.bump.outputs.new_version }}"
        body: |
          ## What's Changed
          
          This is an automated release for version ${{ steps.bump.outputs.new_version }}.
          
          ### Version Information
          - **Previous Version**: ${{ steps.bump.outputs.current_version }}
          - **New Version**: ${{ steps.bump.outputs.new_version }}
          - **Bump Type**: ${{ steps.bump.outputs.bump_type }}
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### Recent Changes
          ```
          $(git log --oneline --no-merges -n 5)
          ```
          
          ### Installation
          ```bash
          pip install pi-pages==${{ steps.bump.outputs.new_version }}
          ```
          
          ---
          *This release was automatically generated by GitHub Actions*
        draft: false
        prerelease: false
    
    - name: Success summary
      run: |
        echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Previous Version**: ${{ steps.bump.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **New Version**: ${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Bump Type**: ${{ steps.bump.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Git Tag**: v${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **GitHub Release**: Created" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **CHANGELOG**: Updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸŽ‰ **Release ${{ steps.bump.outputs.new_version }} is now available!**" >> $GITHUB_STEP_SUMMARY 