name: Continuous Integration

on: [push, pull_request]

jobs:
  # Quick checks that should run first
  quick-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8
    
    - name: Check code formatting
      run: |
        black --check --diff .
        isort --check-only --diff .
    
    - name: Basic linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check for syntax errors
      run: |
        python -m py_compile pi-pages.py
        python -c "import ast; ast.parse(open('pi-pages.py').read())"

  # Test job
  test:
    needs: quick-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    services:
      chrome:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: >-
          --health-cmd "/opt/bin/health-check.sh"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-chromedriver
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        pip install -e .
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=pi_pages --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --timeout=300
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  # Security job
  security:
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt

  # Code quality job
  code-quality:
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy
    
    - name: Check code formatting with Black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports

  # Performance job
  performance:
    needs: quick-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    
    services:
      chrome:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: >-
          --health-cmd "/opt/bin/health-check.sh"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-chromedriver
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler psutil
        pip install -e .
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/performance/ -v --benchmark-only --benchmark-sort=mean || true
    
    - name: Run load test
      run: |
        python -m pytest tests/load/ -v --timeout=600 || true
    
    - name: Generate performance report
      run: |
        echo "## Performance Test Results" > performance-report.md
        echo "" >> performance-report.md
        echo "### Performance tests completed" >> performance-report.md
    
    - name: Upload performance artifacts
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ matrix.python-version }}
        path: |
          .benchmarks/
          performance-report.md

  # Documentation job
  documentation:
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -e .
    
    - name: Build documentation
      run: |
        mkdir -p docs
        sphinx-quickstart -q -p "Pi-Pages" -a "Pi-Pages Team" -v 2.0.0 -r 2.0.0 -l en -n docs || true
        sphinx-build -b html docs docs/_build/html || true
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # Docker job
  docker:
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and test Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: pi-pages:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm pi-pages:test python -c "import pi_pages; print('Import successful')" || true

  # Summary job
  summary:
    needs: [test, security, code-quality, performance, documentation, docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check workflow status
      run: |
        echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job status
        echo "✅ **test**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **security**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **code-quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **performance**: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **documentation**: ${{ needs.documentation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **docker**: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const jobs = [
            { name: 'test', result: '${{ needs.test.result }}' },
            { name: 'security', result: '${{ needs.security.result }}' },
            { name: 'code-quality', result: '${{ needs.code-quality.result }}' },
            { name: 'performance', result: '${{ needs.performance.result }}' },
            { name: 'documentation', result: '${{ needs.documentation.result }}' },
            { name: 'docker', result: '${{ needs.docker.result }}' }
          ];
          
          let comment = '## 🚀 CI Pipeline Results\n\n';
          
          jobs.forEach(job => {
            const status = job.result === 'success' ? '✅' : job.result === 'failure' ? '❌' : '⏹️';
            comment += `${status} **${job.name}**: ${job.result}\n`;
          });
          
          comment += '\n---\n';
          comment += 'View detailed results in the Actions tab.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 