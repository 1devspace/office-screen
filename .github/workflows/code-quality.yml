name: Code Quality

on: [push, pull_request]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort
    
    - name: Check code formatting with Black
      run: |
        echo "Checking code formatting..."
        black --check --diff . || echo "‚ö†Ô∏è Code formatting issues found (but continuing)"
    
    - name: Check import sorting with isort
      run: |
        echo "Checking import sorting..."
        isort --check-only --diff . || echo "‚ö†Ô∏è Import sorting issues found (but continuing)"
    
    - name: Basic linting with flake8
      run: |
        echo "Running basic linting..."
        # Only check for critical errors (E9, F63, F7, F82)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Critical linting issues found (but continuing)"
        
        # Check for style issues but don't fail
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics || echo "‚ö†Ô∏è Style issues found (but continuing)"
    
    - name: Check for common issues
      run: |
        echo "Checking for common issues..."
        
        # Check for print statements (should use logging)
        if grep -r "print(" . --include="*.py" | grep -v "tests/" | grep -v "print('‚úÖ" | grep -v "print('‚ùå" | grep -v "print('üéâ" | grep -v "print('‚ö†Ô∏è"; then
          echo "‚ö†Ô∏è Found print statements (consider using logging)"
        else
          echo "‚úÖ No print statements found"
        fi
        
        # Check for TODO comments
        if grep -r "TODO" . --include="*.py" | grep -v "tests/"; then
          echo "‚ÑπÔ∏è Found TODO comments"
        else
          echo "‚úÖ No TODO comments found"
        fi
        
        # Check for FIXME comments
        if grep -r "FIXME" . --include="*.py" | grep -v "tests/"; then
          echo "‚ö†Ô∏è Found FIXME comments"
        else
          echo "‚úÖ No FIXME comments found"
        fi
    
    - name: Check file sizes
      run: |
        echo "Checking file sizes..."
        
        # Check if any Python file is too large
        for file in $(find . -name "*.py" -not -path "./tests/*" -not -path "./.git/*"); do
          size=$(wc -l < "$file")
          if [ "$size" -gt 1000 ]; then
            echo "‚ö†Ô∏è Large file: $file ($size lines)"
          else
            echo "‚úÖ $file ($size lines)"
          fi
        done
    
    - name: Success summary
      run: |
        echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Formatting Check**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Import Sorting**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Basic Linting**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Common Issues**: Checked" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **File Size Check**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéâ **Overall Status**: Code quality checks completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "> Note: This workflow is designed to be informative rather than blocking." >> $GITHUB_STEP_SUMMARY 